services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: recruitapp-nginx
    container_name: recruitapp-nginx
    ports:
      - "80:80"
    depends_on:
      - frontend-dev
      - backend
    networks:
      - app-network
    volumes:
      - ./nginx/proxy.conf:/etc/nginx/conf.d/proxy.conf
      - nginx-logs:/var/log/nginx

  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    image: recruitapp-frontend-dev
    container_name: recruitapp-frontend-dev
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules # 排除node_modules目录，使用容器内的模块
    environment:
      - NODE_ENV=development
      - VITE_APP_API_URL=http://backend:8000 # 后端API地址，使用Docker网络中的容器名
      - CHOKIDAR_USEPOLLING=true # 启用轮询，在某些Docker环境中需要
    command: npm run dev -- --host 0.0.0.0 # 确保在容器内部监听所有网络接口
    depends_on:
      - backend
    networks:
      - app-network

  frontend-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: recruitapp-frontend-prod
    container_name: recruitapp-frontend-prod
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - app-network
    profiles:
      - prod # 只在生产环境下启动

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: recruitapp-backend
    container_name: recruitapp-backend
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend-media:/app/media # 持久化媒体文件
      - backend-static:/app/static # 持久化静态文件
      - backend-logs:/app/logs # 持久化日志文件
    env_file:
      - ./.env
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - DJANGO_SUPERUSER_USERNAME=root
      - DJANGO_SUPERUSER_EMAIL=2314679829@qq.com
      - DJANGO_SUPERUSER_PASSWORD=admin123456
      - USE_REDIS=True # 启用Redis存储验证码
      - REDIS_HOST=redis # 正确设置Redis主机名为容器服务名
      - REDIS_PORT=6379 # 设置Redis端口
      - RESET_DATABASE=False # 默认不重置数据库，需要重置时修改为True
      # 数据库连接参数
      - DB_HOST=db # 使用容器名称，而非IP
      - DB_PORT=3306
      - DB_NAME=django_oauth
      - DB_USER=root
      - DB_PASSWORD=123456
    depends_on:
      db:
        condition: service_healthy # 等待数据库健康检查通过
      redis:
        condition: service_healthy # 等待Redis健康检查通过
    # 使用简化的启动脚本
    command: bash /app/simplified_entrypoint.sh
    networks:
      - app-network
    # DNS配置
    dns:
      - 8.8.8.8
      - 8.8.4.4
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/accounts/status/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  db:
    image: mysql:8.0
    container_name: recruitapp-db
    restart: always
    ports:
      - "3307:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    env_file:
      - ./.env
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --max_connections=100
      --wait_timeout=28800
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      - MYSQL_DATABASE=django_oauth
    networks:
      - app-network
    # 健康检查逻辑
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p123456",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis服务配置
  redis:
    image: redis:7-alpine
    container_name: recruitapp-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-backlog 511
      --tcp-keepalive 300
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

networks:
  app-network:
    driver: bridge
    # 自定义DNS配置
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  mysql-data:
  backend-media:
  backend-static:
  backend-logs: # 后端日志数据卷
  nginx-logs:
  redis-data: # Redis数据卷
